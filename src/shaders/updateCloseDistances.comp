#version 450 core

#define UINT_MAX 0xffffffff
#define FLT_MAX 3.402823e+38

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

layout(binding = 0, r32f) restrict uniform image3D grid;
layout(binding = 1, r32ui) restrict uniform uimage3D cands;

uniform uvec3 res;
uniform vec3 bmin, bmax;
uniform bool signed;

struct Tri
{
    vec4 v0, v1, v2;
};

layout(binding = 0, std430) restrict readonly buffer TriangleList { Tri tris[]; };

vec4 getDistance(vec3 point, vec3 vertex0, vec3 vertex1, vec3 vertex2)
{
    vec3  diff  = point - vertex0;
    vec3  edge0 = vertex1 - vertex0;
    vec3  edge1 = vertex2 - vertex0;
    float a00   = dot(edge0, edge0);
    float a01   = dot(edge0, edge1);
    float a11   = dot(edge1, edge1);
    float b0    = -dot(diff, edge0);
    float b1    = -dot(diff, edge1);
    float zero  = 0.f;
    float one   = 1.f;
    float det   = a00 * a11 - a01 * a01;
    float t0    = a01 * b1 - a11 * b0;
    float t1    = a01 * b0 - a00 * b1;

    if(t0 + t1 <= det)
    {
        if(t0 < zero)
        {
            if(t1 < zero) // region 4
            {
                if(b0 < zero)
                {
                    t1 = zero;
                    if(-b0 >= a00) // V1
                    {
                        t0 = one;
                    }
                    else // E01
                    {
                        t0 = -b0 / a00;
                    }
                }
                else
                {
                    t0 = zero;
                    if(b1 >= zero) // V0
                    {
                        t1 = zero;
                    }
                    else if(-b1 >= a11) // V2
                    {
                        t1 = one;
                    }
                    else // E20
                    {
                        t1 = -b1 / a11;
                    }
                }
            }
            else // region 3
            {
                t0 = zero;
                if(b1 >= zero) // V0
                {
                    t1 = zero;
                }
                else if(-b1 >= a11) // V2
                {
                    t1 = one;
                }
                else // E20
                {
                    t1 = -b1 / a11;
                }
            }
        }
        else if(t1 < zero) // region 5
        {
            t1 = zero;
            if(b0 >= zero) // V0
            {
                t0 = zero;
            }
            else if(-b0 >= a00) // V1
            {
                t0 = one;
            }
            else // E01
            {
                t0 = -b0 / a00;
            }
        }
        else // region 0, interior
        {
            float invDet = one / det;
            t0 *= invDet;
            t1 *= invDet;
        }
    }
    else
    {
        float tmp0, tmp1, numer, denom;

        if(t0 < zero) // region 2
        {
            tmp0 = a01 + b0;
            tmp1 = a11 + b1;
            if(tmp1 > tmp0)
            {
                numer = tmp1 - tmp0;
                denom = a00 - 2.0f * a01 + a11;
                if(numer >= denom) // V1
                {
                    t0 = one;
                    t1 = zero;
                }
                else // E12
                {
                    t0 = numer / denom;
                    t1 = one - t0;
                }
            }
            else
            {
                t0 = zero;
                if(tmp1 <= zero) // V2
                {
                    t1 = one;
                }
                else if(b1 >= zero) // V0
                {
                    t1 = zero;
                }
                else // E20
                {
                    t1 = -b1 / a11;
                }
            }
        }
        else if(t1 < zero) // region 6
        {
            tmp0 = a01 + b1;
            tmp1 = a00 + b0;
            if(tmp1 > tmp0)
            {
                numer = tmp1 - tmp0;
                denom = a00 - 2.0f * a01 + a11;
                if(numer >= denom) // V2
                {
                    t1 = one;
                    t0 = zero;
                }
                else // E12
                {
                    t1 = numer / denom;
                    t0 = one - t1;
                }
            }
            else
            {
                t1 = zero;
                if(tmp1 <= zero) // V1
                {
                    t0 = one;
                }
                else if(b0 >= zero) // V0
                {
                    t0 = zero;
                }
                else // E01
                {
                    t0 = -b0 / a00;
                }
            }
        }
        else // region 1
        {
            numer = a11 + b1 - a01 - b0;
            if(numer <= zero) // V2
            {
                t0 = zero;
                t1 = one;
            }
            else
            {
                denom = a00 - 2.0f * a01 + a11;
                if(numer >= denom) // V1
                {
                    t0 = one;
                    t1 = zero;
                }
                else // 12
                {
                    t0 = numer / denom;
                    t1 = one - t0;
                }
            }
        }
    }

    vec3 closest = vertex0 + t0 * edge0 + t1 * edge1;
    diff         = point - closest;
    return vec4(closest, sqrt(dot(diff, diff)));
}

void main()
{
    ivec3 g_ID = ivec3(gl_GlobalInvocationID);

    ivec3 resi = ivec3(res);

    float n_gridVal = FLT_MAX;

    if(g_ID.x < resi.x && g_ID.y < resi.y && g_ID.z < resi.z)
    {
        vec3 pos = vec3(g_ID) / vec3(resi - 1);
        pos      = pos * (bmax - bmin) + bmin;
        for(int v = -2; v <= 2; ++v)
            for(int w = -2; w <= 2; ++w)
            {
                ivec3 grid_tc = g_ID + ivec3(0, v, w);
                if(any(lessThan(grid_tc, ivec3(0))) || any(greaterThanEqual(grid_tc, resi)))
                    continue;
                int  start_x    = max(grid_tc.x - 2, 0);
                int  end_x      = min(grid_tc.x + 2, resi.x - 1);
                int  linear_idx = start_x + grid_tc.y * resi.x + grid_tc.z * resi.y * resi.x;
                int  prev_idx   = linear_idx - 1;
                uint start      = linear_idx == 0 ? 0
                                             : imageLoad(cands,
                                                         ivec3(prev_idx % resi.x,
                                                               (prev_idx / resi.x) % resi.y,
                                                               prev_idx / (resi.y * resi.x)))
                                                       .r;
                uint num_candidates = imageLoad(cands, ivec3(end_x, grid_tc.yz)).r - start;
                for(int j = 0; j < num_candidates; ++j)
                {
                    Tri tri = tris[start + j];

                    vec3 face_normal = vec3(tri.v0.w, tri.v1.w, tri.v2.w);
                    vec4 dist        = getDistance(pos, vec3(tri.v0), vec3(tri.v1), vec3(tri.v2));

                    float sign = signed ? sign(dot(face_normal, pos - dist.xyz)) : 1.f;
                    if(dist.w < abs(n_gridVal))
                    {
                        n_gridVal = sign * dist.w;
                    }
                }
            }

        if(n_gridVal != FLT_MAX)
            imageStore(grid, g_ID, vec4(n_gridVal));
    }
}
